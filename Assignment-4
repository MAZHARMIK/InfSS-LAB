/*
A grayscale image is given in the uncompressed PGM format(File are avaiable as lena.asci.png). Hide your secret message in the least
significant bit of every pixel constituting the image. Show the processed image and retrieve the hidden information back.
*/

#include<stdio.h>
#include<stdlib.h>

int main()
{
    FILE *fp1, *fp2;
    fp1 = fopen ("lena.ascii.pgm", "r");
    fp2 = fopen ("message.pgm", "w");
    char magic, number ;
    fscanf(fp1, "%c", &magic);
    fscanf(fp1, "%c", &number);
    fprintf(fp2, "%c%c\n# lena.pgma created by PGMA_IO::PGMA_WRITE.\n", magic, number); //writing the magic number

    int rows, columns, max, element;
    fscanf(fp1, "%d %d %d", &rows, &columns, &max);
    fprintf(fp2, "%d %d\n%d\n", rows, columns, max);


    int array[rows][columns], bits[8], i, j, ascii;
    char Message[] = "MIK";
    int message_length = strlen(Message);
    for(i=0; i<rows; i++)
    {
        for(j=0; j<columns; j++)
        {
            fscanf(fp1, "%d", &element);
            array[i][j] = element;
        }
    }
    int arrayi=0, arrayj=0, m, temp, bits_var = 0, z;
            int count=0;

            for(i=0; i<message_length; i++)
            {
                z = 0;
                for(m=0; m<8; m++)
                    bits[m] = 0;

                ascii = Message[i];

                while(ascii!=0)
                {
                    bits[z++] = ascii%2;
                    ascii = ascii/2;
                }

                for(m=7; m>=4; m--)
                {
                    temp = bits[7-m];
                    bits[7-m] = bits[m];
                    bits[m] = temp;
                }

                for(bits_var=0; bits_var<8; bits_var++)
                {
                    if(((array[arrayi][arrayj]%2 == 0) && bits[bits_var] == 0) || ((array[arrayi][arrayj]%2 != 0) && bits[bits_var] == 1))
                    {
                        fprintf(fp2, "%d ", array[arrayi][arrayj]);
                    }
                    else if(((array[arrayi][arrayj]%2 == 0) && bits[bits_var] == 1))
                    {
                        fprintf(fp2, "%d ", array[arrayi][arrayj]+1);
                        array[arrayi][arrayj] = array[arrayi][arrayj]+1;
                    }
                    else if(((array[arrayi][arrayj]%2 != 0) && bits[bits_var] == 0))
                    {
                        fprintf(fp2, "%d ", array[arrayi][arrayj]-1);
                        array[arrayi][arrayj] = array[arrayi][arrayj]-1;
                    }

                    if(arrayj+1>columns)
                    {
                        arrayi++;
                        arrayj=0;
                    }
                    else
                        arrayj++;
                }
            }

            for(i=arrayi; i<rows; i++)
            {
                for(j=arrayj; j<columns; j++)
                {
                    fprintf(fp2, "%d ", array[i][j]);
                }
                if(j>=columns)
                    arrayj = 0;
                fprintf(fp2, "\n");
            }


        ///==============================The Decryption Part============================
        int Total_pixels = message_length*8;
        int Pixels_checked = 0, base, timer = 8, sum, flag = 0;
        printf("This is the embedded message: ");
        
        for(i=0; i<rows; i++)
        {
            sum = 0;
            base = 128;
            for(j=0; j<columns; j++)
            {
                Pixels_checked++;
                if(Pixels_checked > Total_pixels)
                {
                    flag = 1;
                    break;
                }
                if(array[i][j]%2!=0)
                    sum = sum+base;
                base = base/2;
                timer--;
                if(timer==0)
                {
                    timer = 8;
                    printf("%c", sum);
                    sum = 0;
                    base=128;
                }
            }
            if(flag==1)
                break;
        }

return 0;
}
