//Write a program in C/C++/Java to implement the DES algorithm

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

void round_fun(char *Left_text, char *Right_text, char *Left_key, char *Right_key, int sixteen)
{
    int i, j, z=0;
    printf("\nRound = %d\n", 16-sixteen);
    printf("Left_Text: \n");
    char Left_shift_key[28], Right_shift_key[28], key_plus[56];
    for(i=0; i<32; i++)
    {
        printf("%c", Left_text[i]);
    }
    printf("\nRight_text: \n");
    for(i=0; i<32; i++)
    {
        printf("%c", Right_text[i]);
    }
    printf("\nLeft_Key : \n");
    
    for(i=0; i<28; i++)
    {
        printf("%c", Left_key[i]);
    }
    printf("\nRight_Key : \n");
    for(i=0; i<28; i++)
    {
        printf("%c", Right_key[i]);
    }
    printf("\n");
	if(sixteen==0)
		exit(0);
    
    ///==========================SHIFT=========================
	
    for(i=0; i<27; i++)
    {
        Left_shift_key[i] = Left_key[i+1];
        Right_shift_key[i] = Right_key[i+1];
    }
    Left_shift_key[27] = Left_key[0];
    Right_shift_key[27] = Right_key[0];

    

    

    ///==========================left_shift_key + right_shift_key=========================
    for(i=0; i<28; i++)
    {
        key_plus[i] = Left_shift_key[i];
        key_plus[i+28] = Right_shift_key[i];
    }

    

    char table_two[8][6] = {{14  ,  17  , 11  ,  24   ,  1  ,  5},
		          {3  ,  28  , 15  ,   6  ,  21  , 10},
		         {23  ,  19  , 12  ,  4   , 26   , 8},
		         {16  ,   7  , 27  ,  20  ,  13  ,  2},
		         {41  ,  52  , 31  ,  37  ,  47  , 55},
		         {30  ,  40  , 51  ,  45  ,  33  , 48},
		         {44  ,  49  , 39  ,  56  ,  34  , 53},
		         {46  ,  42  , 50  ,  36  ,  29  , 32}};
    z=0;
    char final_key[48];

    for(i=0; i<8; i++)
    {
        for(j=0; j<6; j++)
        {
            final_key[z++] = key_plus[table_two[i][j]-1];
        }
    }
    
    z=0;
    char modified_Right_Text[48];
    modified_Right_Text[0] = Right_text[31];
    modified_Right_Text[47] = Right_text[0];
    for(i=1; i<47; i++)
    {
        if((i+1)%6==0)
        {
            modified_Right_Text[i] = 'c';
            modified_Right_Text[i+1] = 'c';
            i++;
        }
        else
            modified_Right_Text[i] = Right_text[z++];
    }
    
    for(i=0; i<48; i++)
    {
            if(modified_Right_Text[i]=='c')
            {
                modified_Right_Text[i] = modified_Right_Text[i+2];
                modified_Right_Text[i+1] = modified_Right_Text[i-1];
            }
    }
    
    char Xor[48];
    for(i=0; i<48; i++)
    {
            if(final_key[i]==modified_Right_Text[i])
                Xor[i] = '0';
            else
                Xor[i] = '1';
    }
    
    z = 0;
    char New_Xor[32]; // S-box
    for(i=1; i<47; i++)
    {
            if((i+1)%6==0 || (i%6==0))
            {
                i++;
            }
            else
                New_Xor[z++] = Xor[i];
    }

    
	//p-box
    char table_three[4][8] = {
                              {16,7,20,21,29,12,28,17},
                              {1,15,23,26,5,18,31,10},
                              {2,8,24,14,32,27,3,9},
                              {19,13,30,6,22,11,4,25}
                             };
    char final_modified_Right_Text[32];
    z=0;
    for(i=0; i<4; i++)
    {
        for(j=0; j<8; j++)
        {
            final_modified_Right_Text[z++] = New_Xor[table_three[i][j]-1];
        }
    }


    char xored_final_modified_Right_Text[32];

    for(i=0; i<32; i++)
    {
            if(Left_text[i]==final_modified_Right_Text[i])
                xored_final_modified_Right_Text[i] = '0';
            else
                xored_final_modified_Right_Text[i] = '1';
    }

    
    for(i=0; i<32; i++)
    {
        Left_text[i] = Right_text[i]; //Left_text becomes the Right_Text
    }
	
	round_fun(Left_text, xored_final_modified_Right_Text, Left_shift_key, Right_shift_key, --sixteen);
}


int main()
{
	int i, j, z=0;
    char plaint_text[64] = "0000000100100011010001010110011110001001101010111100110111101111";
    char Left_key[28], Right_key[28], Left_text[32], Right_text[32];
    for(i=0; i<32; i++)
    {
        Left_text[i] = plaint_text[i];
        Right_text[i] = plaint_text[i+32];
    }
    
    
    char *key = "0001001100110100010101110111100110011011101111001101111111110001";
    //printf("\nkey : \n%s",key);
    char key_plus[56];
    int table_one[8][7] = {
                        {57,49,41,33,25,17,9},
                        {1,58,50,42,34,26,18},
                        {10,2,59,51,43,35,27},
                        {19,11,3,60,52,44,36},
                        {63,55,47,39,31,23,15},
                        {7,62,54,46,38,30,22},
                        {14,6,61,53,45,37,29},
                        {21,13,5,28,20,12,4}
                       };

    for(i=0; i<8; i++)
    {
        for(j=0; j<7; j++)
        {
            key_plus[z++] = key[table_one[i][j]-1];
        }
    }
    
    for(i=0; i<28; i++)
    {
        Left_key[i] = key_plus[i];
        Right_key[i] = key_plus[i+28];
    }
    
    int sixteen = 16;
    round_fun(Left_text, Right_text, Left_key, Right_key, sixteen);
 
 
}
