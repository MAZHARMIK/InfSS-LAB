/*
Small Introduction: Play Fair
Example:
The key is : iiest

This is the Play fair matrix for the given key 'iiest'
i e s t a
b c d f g
h k l m n
o p q r u
v w x y z

Output: 

Please Enter the plain text: iamafaculty
Encrypted Text : eintgtgpmszy
Decrypted Text: iamafaculty
*/


#include<stdio.h>
#include<string.h>

char playfair[5][5];
struct index
{
	int x, y;
}mik;

void getIndex(char c)
{
	int i, j;
	for(i=0; i<5; i++)
	{
		for(j=0; j<5; j++)
		{
			if(playfair[i][j]==c)
			{
				mik.x = i;
				mik.y = j;
			}
		}
	}
}

int main()
{
	int alpha[123] = {0};

	char KEY[] = "iiest";
	int i, j, z=0, flag=1;
	printf("The key is : %s\n", KEY);
	int length = strlen(KEY);
	for(i=0; i<5; i++)
	{
		for(j=0; j<5; j++)
		{
			playfair[i][j] = '@';
		}
	}

	for(i=0; i<5; i++)
	{
		for(j=0; j<5; j++)
		{
			if(alpha[KEY[z]]==0)
			{
				playfair[i][j] = KEY[z];
				alpha[KEY[z]] = 1;
			}
			else
				j--;
			z = z+1;
			if(z==length)
			{
				flag = 0;
				break;
			}
		}
		if(flag==0)
			break;
	}


	int o;
	j++;

	for(o=97; o<123; o++)
	{
		if(o==106)//we are going to check for i/j
		{
			continue;
		}
		if(alpha[o]!=1)
		{
			playfair[i][j] = o;
			alpha[o]=1;
			j++;
			if(j>=5)
			{
				i++;
				j=0;
			}
		}
	}


	printf("\nThis is the Play fair matrix\n");

	for(i=0; i<5; i++)
	{
		for(j=0; j<5; j++)
		{
			printf("%c ", playfair[i][j]);
		}
		printf("\n");
	}
	////////////////////////////////////////////////////////////////////////////////////////

	printf("Please Enter the plain text: ");
	char plaintext[20];
	char NewText[100];
	char finalText[100];
	scanf("%s", plaintext);
	int plaintext_length = strlen(plaintext);
	z = 0;

	//inserting characters in between repeating characters
	for(i=0; i<plaintext_length; i++)
	{
		NewText[z++] = plaintext[i];
		if(plaintext[i]==plaintext[i+1])
			NewText[z++] = 'x';
	}


	if(z%2!=0)
	{
		NewText[z++] = 'x';
		NewText[z] = '\0';
	}
	j=0;
	for(i=0; i<z; i++)
	{
		if(NewText[i]=='x' && i%2==0)
		{
			finalText[j++] = NewText[++i];
		}
		else
			finalText[j++] = NewText[i];
	}

	finalText[j] = '\0';

	if(j%2!=0)
	{
		j = j-1;
		finalText[j] = '\0';
	}

	z = j;

	////////////////////////////////////////////////////////////////////////////////////////

	char Encoding[100];
	int encoding_size=0;
	int x1, x2, y1, y2, temp;

	for(i=0; i<z; i++)
	{
        if(finalText[i]=='j')
            getIndex('i');
        else
            getIndex(finalText[i]);

		x1 = mik.x;
		y1 = mik.y;

		getIndex(finalText[i+1]);
		x2 = mik.x;
		y2 = mik.y;

		//printf("(%d %d) = %c, (%d, %d) = %c\n", x1, y1, playfair[x1][y1], x2, y2, playfair[x2][y2]);

		if(x1==x2) //same row
		{
			y1 = (y1+1)%5;
			y2 = (y2+1)%5;
			Encoding[encoding_size++] = playfair[x1][y1];
			Encoding[encoding_size++] = playfair[x2][y2];
		}
		else if(y1==y2) //same column
		{
			x1 = (x1+1)%5;
			x2 = (x2+1)%5;
			Encoding[encoding_size++] = playfair[x1][y1];
			Encoding[encoding_size++] = playfair[x2][y2];
		}

		else //taking diagonal elements of the formed square
		{
			temp = y2;
			y2 = y1;
			y1 = temp;
			Encoding[encoding_size++] = playfair[x1][y1];
			Encoding[encoding_size++] = playfair[x2][y2];

		}
		i++;
	}
	//printf("size of encoding = %d\n", encoding_size);
	Encoding[encoding_size] = '\0';

	printf("Encrypted Text : %s\n", Encoding); //This is the encoded message

	////////////////////////////////////////DECODING////////////////////////////////////////////////

    char Decoding[100], decoding_size = 0;
	for(i=0; i<encoding_size; i++)
	{
	    if(Encoding[i]=='j')
            getIndex('i');
        else
            getIndex(Encoding[i]);

		x1 = mik.x;
		y1 = mik.y;

		getIndex(Encoding[i+1]);
		x2 = mik.x;
		y2 = mik.y;

		//printf("(%d %d) = %c, (%d, %d) = %c\n", x1, y1, playfair[x1][y1], x2, y2, playfair[x2][y2]);

		if(x1==x2) //same row
		{
			y1 = ((y1-1)<0) ? 4 : (y1-1);
			y2 = ((y2-1)<0) ? 4 : (y2-1);
			Decoding[decoding_size++] = playfair[x1][y1];
			Decoding[decoding_size++] = playfair[x2][y2];
		}
		else if(y1==y2) //same column
		{
			x1 = ((x1-1)<0) ? 4 : (x1-1);
			x2 = ((x2-1)<0) ? 4 : (x2-1);
			Decoding[decoding_size++] = playfair[x1][y1];
			Decoding[decoding_size++] = playfair[x2][y2];
		}

		else //taking diagonal elements of the square formed
		{
			temp = y2;
			y2 = y1;
			y1 = temp;
			Decoding[decoding_size++] = playfair[x1][y1];
			Decoding[decoding_size++] = playfair[x2][y2];

		}
		i++;
	}
    Decoding[decoding_size] = '\0';

    printf("Decrypted Text: ");

	for(i=0; i<decoding_size; i++)
    {
        if(Decoding[i]!='x')
            printf("%c", Decoding[i]);
    }

return 0;
}
